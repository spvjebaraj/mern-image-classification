{"version":3,"sources":["context/createDataContext.js","api/classification.js","context/AuthContext.js","context/ClassificationContext.js","components/Navigation/Navigation.js","components/Classification/Classification.js","components/ImageBox/ImageBox.js","components/InputForm/InputForm.js","components/Signin/Signin.js","components/Signup/Signup.js","navigation/routes.js","navigation/index.js","App.js","serviceWorker.js","index.js"],"names":["reducer","actions","defaultValue","Context","React","createContext","Provider","children","useReducer","state","dispatch","boundActions","key","value","instance","axios","create","baseURL","interceptors","request","use","config","token","window","sessionStorage","getItem","headers","Authorization","err","Promise","reject","createDataContext","action","type","errorMessage","payload","isAuthenticated","userToken","isSignout","restoreToken","setItem","signIn","a","email","password","classificationApi","post","response","data","error","signUp","name","errorText","includes","signOut","removeItem","isLoading","classification","getImageDetails","url","console","log","Navigation","onRouteChange","className","onClick","Classification","classifications","scope","map","index","probability","ImageBox","imageUrl","id","alt","src","width","heigh","InputForm","useState","setUrl","useContext","ClassificationContext","onChange","e","target","color","Signin","AuthContext","setEmail","setPassword","htmlFor","style","marginTop","fontSize","Signup","setName","particlesOptions","particles","number","density","enable","value_area","Routes","route","setRoute","useEffect","bootstrapAsync","params","Providers","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bebc2bdf.chunk.js","sourcesContent":["import React, { useReducer } from \"react\";\n\nexport default (reducer, actions, defaultValue) => {\n  const Context = React.createContext();\n\n  const Provider = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, defaultValue);\n\n    const boundActions = {};\n    for (let key in actions) {\n      boundActions[key] = actions[key](dispatch);\n    }\n\n    return (\n      <Context.Provider value={{ state, ...boundActions }}>\n        {children}\n      </Context.Provider>\n    );\n  };\n\n  return { Context, Provider };\n};\n","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"http://localhost:5000\",\n});\n\ninstance.interceptors.request.use(\n  (config) => {\n    const token = window.sessionStorage.getItem(\"userToken\");\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n\n    return config;\n  },\n  (err) => {\n    return Promise.reject(err);\n  }\n);\n\nexport default instance;\n","import createDataContext from \"./createDataContext\";\nimport classificationApi from \"../api/classification\";\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_ERROR\":\n      return { ...state, errorMessage: action.payload };\n    case \"RESTORE_TOKEN\":\n      return {\n        isAuthenticated: true,\n        errorMessage: \"\",\n        userToken: action.payload,\n      };\n    case \"SIGN_IN\":\n    case \"SIGN_UP\":\n      return {\n        isAuthenticated: true,\n        errorMessage: \"\",\n        isSignout: false,\n        userToken: action.payload,\n      };\n    case \"SIGN_OUT\":\n      return {\n        isAuthenticated: false,\n        errorMessage: \"\",\n        isSignout: true,\n        userToken: null,\n      };\n    default:\n      return state;\n  }\n};\n\nconst restoreToken = (dispatch) => (userToken) => {\n  window.sessionStorage.setItem(\"userToken\", userToken);\n  dispatch({ type: \"RESTORE_TOKEN\", payload: userToken });\n};\n\nconst signIn = (dispatch) => async ({ email, password }) => {\n  try {\n    const response = await classificationApi.post(\"/users/signin\", {\n      email,\n      password,\n    });\n    window.sessionStorage.setItem(\"userToken\", response.data.token);\n    dispatch({ type: \"SIGN_IN\", payload: response.data.token });\n  } catch (err) {\n    dispatch({\n      type: \"ADD_ERROR\",\n      payload: err.response.data.error,\n    });\n  }\n};\n\nconst signUp = (dispatch) => async ({ name, email, password }) => {\n  try {\n    const response = await classificationApi.post(\"/users/signup\", {\n      name,\n      email,\n      password,\n    });\n\n    window.sessionStorage.setItem(\"userToken\", response.data.token);\n    dispatch({ type: \"SIGN_UP\", payload: response.data.token });\n  } catch (err) {\n    let errorText = err.response.data.error;\n    if (errorText.includes(\"duplicate\")) {\n      errorText = \"Email already exists. Please choose different.\";\n    } else if (errorText.includes(\"minimum\")) {\n      errorText = \"Password must be minimum of 7 characters\";\n    }\n\n    dispatch({\n      type: \"ADD_ERROR\",\n      payload: errorText,\n    });\n  }\n};\n\nconst signOut = (dispatch) => async () => {\n  try {\n    await classificationApi.post(\"/users/logout\");\n    window.sessionStorage.removeItem(\"userToken\");\n    dispatch({ type: \"SIGN_OUT\" });\n  } catch (err) {\n    dispatch({\n      type: \"ADD_ERROR\",\n      payload: err.response.data.error,\n    });\n  }\n};\n\nexport const { Context, Provider } = createDataContext(\n  authReducer,\n  { restoreToken, signIn, signUp, signOut },\n  {\n    isAuthenticated: false,\n    errorMessage: \"\",\n    isSignout: false,\n    userToken: null,\n  }\n);\n","import createDataContext from \"./createDataContext\";\nimport classificationApi from \"../api/classification\";\n\nconst classificationReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_ERROR\":\n      return { ...state, errorMessage: action.payload };\n    case \"FETCHING_DETAILS\":\n      return {\n        ...state,\n        errorMessage: \"\",\n        isLoading: true,\n      };\n    case \"FETCHING_DETAILS_SUCCESS\":\n      return {\n        ...state,\n        errorMessage: \"\",\n        isLoading: false,\n      };\n    case \"GET_IMAGE_DETAILS\":\n      return {\n        errorMessage: \"\",\n        classification: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst getImageDetails = (dispatch) => async ({ url }) => {\n  try {\n    dispatch({ type: \"FETCHING_DETAILS\" });\n    const response = await classificationApi.post(\"/imageurl\", { url });\n    dispatch({\n      type: \"GET_IMAGE_DETAILS\",\n      payload: response.data.classification,\n    });\n    dispatch({ type: \"FETCHING_DETAILS_SUCCESS\" });\n  } catch (err) {\n    console.log(err.response.data);\n    dispatch({\n      type: \"ADD_ERROR\",\n      payload: err.response.data.error,\n    });\n  }\n};\n\nexport const { Context, Provider } = createDataContext(\n  classificationReducer,\n  { getImageDetails },\n  { isLoading: false, classification: null, errorMessage: \"\" }\n);\n","import React from \"react\";\nimport \"./Navigation.css\";\n\nconst Navigation = ({ isAuthenticated, userToken, onRouteChange }) => {\n  if (isAuthenticated && userToken !== null) {\n    return (\n      <nav className=\"navbar\">\n        <p className=\"nav-text\">IMAGE CLASSIFICATION</p>\n        <ul className=\"nav-links\">\n          <li className=\"nav-item\">\n            <p onClick={() => onRouteChange(\"signout\")}>SignOut</p>\n          </li>\n        </ul>\n      </nav>\n    );\n  } else {\n    return (\n      <nav className=\"navbar\">\n        <p className=\"nav-text\">IMAGE CLASSIFICATION</p>\n        <ul className=\"nav-links\">\n          <li className=\"nav-item\">\n            <p onClick={() => onRouteChange(\"signin\")}>SignIn</p>\n          </li>\n          <li className=\"nav-item\">\n            <p onClick={() => onRouteChange(\"signup\")}>SignUp</p>\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n};\n\nexport default Navigation;\n","import React from \"react\";\n\nconst Classification = ({ classifications }) => {\n  return (\n    <>\n      <table className=\"table table-bordered\">\n        <thead>\n          <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Probability</th>\n            <th scope=\"col\">Percentage</th>\n          </tr>\n        </thead>\n        <tbody>\n          {classifications.map((classification, index) => {\n            return (\n              <tr key={index}>\n                <th scope=\"row\">{index + 1}</th>\n                <td>{classification.className}</td>\n                <td>{classification.probability}</td>\n                <td>{classification.probability * 100}%</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default Classification;\n","import React from \"react\";\nimport \"./ImageBox.css\";\nimport Classification from \"../Classification/Classification\";\n\nconst ImageBox = ({ classification, imageUrl }) => {\n  if (imageUrl !== \"\" && classification !== null) {\n    return (\n      <div className=\"center\">\n        <div className=\"image-container\">\n          <img\n            id=\"inputimage\"\n            alt=\"\"\n            src={imageUrl}\n            width=\"400px\"\n            heigh=\"auto\"\n          />\n        </div>\n        <div className=\"table-container\">\n          <Classification classifications={classification} />\n        </div>\n      </div>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default ImageBox;\n","import React, { useContext, useState } from \"react\";\nimport { Context as ClassificationContext } from \"../../context/ClassificationContext\";\nimport \"./InputForm.css\";\nimport ImageBox from \"../ImageBox/ImageBox\";\nimport ReactLoading from \"react-loading\";\n\nconst InputForm = () => {\n  const [url, setUrl] = useState(\"\");\n\n  const {\n    state: { isLoading, classification },\n    getImageDetails,\n  } = useContext(ClassificationContext);\n\n  return (\n    <>\n      <p className=\"form-heading\">\n        This App will detect the image and share the details. Give it a try.\n      </p>\n      <div className=\"center\">\n        <div className=\"center form-container\">\n          <input\n            className=\"form-input center\"\n            type=\"text\"\n            value={url}\n            onChange={(e) => setUrl(e.target.value)}\n          />\n          <button\n            className=\"form-button\"\n            onClick={() => getImageDetails({ url })}\n          >\n            Detect\n          </button>\n        </div>\n      </div>\n      <div className=\"center\">\n        <ImageBox classification={classification} imageUrl={url} />\n      </div>\n      {isLoading ? (\n        <div className=\"center\">\n          <ReactLoading type=\"spin\" color=\"#fff\" />\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport default InputForm;\n","import React, { useState, useContext } from \"react\";\nimport { Context as AuthContext } from \"../../context/AuthContext\";\nimport \"./Signin.css\";\n\nconst Signin = () => {\n  const {\n    signIn,\n    state: { errorMessage },\n  } = useContext(AuthContext);\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  return (\n    <div className=\"auth-container center\">\n      <main className=\"main-padding\">\n        <fieldset>\n          <legend className=\"container-legend\">Sign In</legend>\n          <div className=\"field-mt\">\n            <label className=\"field-lbl\" htmlFor=\"email-address\">\n              Email\n            </label>\n            <input\n              className=\"field-input\"\n              type=\"email\"\n              name=\"email-address\"\n              id=\"email-address\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n          </div>\n          <div className=\"field-mb\">\n            <label className=\"field-lbl\" htmlFor=\"password\">\n              Password\n            </label>\n            <input\n              className=\"field-input\"\n              type=\"password\"\n              name=\"password\"\n              id=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n          </div>\n        </fieldset>\n        <div>\n          <input\n            onClick={() => signIn({ email, password })}\n            className=\"auth-button\"\n            type=\"submit\"\n            value=\"Sign in\"\n          />\n        </div>\n        {errorMessage ? (\n          <div style={{ marginTop: \"5px\", fontSize: \"20px\" }}>\n            {errorMessage}\n          </div>\n        ) : null}\n      </main>\n    </div>\n  );\n};\n\nexport default Signin;\n","import React, { useState, useContext } from \"react\";\nimport { Context as AuthContext } from \"../../context/AuthContext\";\nimport \"../Signin/Signin.css\";\n\nconst Signup = () => {\n  const {\n    signUp,\n    state: { errorMessage },\n  } = useContext(AuthContext);\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  return (\n    <div className=\"auth-container center\">\n      <main className=\"main-padding\">\n        <fieldset>\n          <legend className=\"container-legend\">Sign Up</legend>\n          <div className=\"field-mt\">\n            <label className=\"field-lbl\" htmlFor=\"name\">\n              Name\n            </label>\n            <input\n              className=\"field-input\"\n              type=\"text\"\n              name=\"name\"\n              id=\"name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            />\n          </div>\n          <div className=\"field-mt\">\n            <label className=\"field-lbl\" htmlFor=\"email-address\">\n              Email\n            </label>\n            <input\n              className=\"field-input\"\n              type=\"email\"\n              name=\"email-address\"\n              id=\"email-address\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n          </div>\n          <div className=\"field-mb\">\n            <label className=\"field-lbl\" htmlFor=\"password\">\n              Password\n            </label>\n            <input\n              className=\"field-input\"\n              type=\"password\"\n              name=\"password\"\n              id=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n          </div>\n        </fieldset>\n        <div>\n          <input\n            onClick={() => signUp({ name, email, password })}\n            className=\"auth-button\"\n            type=\"submit\"\n            value=\"Sign up\"\n          />\n        </div>\n        {errorMessage ? (\n          <div style={{ marginTop: \"5px\", fontSize: \"20px\" }}>\n            {errorMessage}\n          </div>\n        ) : null}\n      </main>\n    </div>\n  );\n};\n\nexport default Signup;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { Context as AuthContext } from \"../context/AuthContext\";\nimport Particles from \"react-particles-js\";\n\nimport Navigation from \"../components/Navigation/Navigation\";\nimport InputForm from \"../components/InputForm/InputForm\";\nimport Signin from \"../components/Signin/Signin\";\nimport Signup from \"../components/Signup/Signup\";\n\nimport \"../App.css\";\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 800,\n      },\n    },\n  },\n};\n\nconst Routes = () => {\n  const [route, setRoute] = useState(\"\");\n  const {\n    state: { isAuthenticated, userToken },\n    restoreToken,\n    signOut,\n  } = useContext(AuthContext);\n\n  const onRouteChange = (route) => {\n    if (route === \"home\") {\n      setRoute(route);\n    } else if (route === \"signin\") {\n      setRoute(route);\n    } else if (route === \"signup\") {\n      setRoute(route);\n    } else if (route === \"signout\") {\n      signOut();\n    }\n  };\n\n  // const initFetch = useCallback(() => {\n  //   let userToken;\n\n  //   try {\n  //     userToken = window.sessionStorage.getItem(\"userToken\");\n  //     restoreToken(userToken);\n  //   } catch (e) {\n  //     console.log(e);\n  //   }\n  // }, []);\n\n  useEffect(() => {\n    const bootstrapAsync = () => {\n      try {\n        const userToken = window.sessionStorage.getItem(\"userToken\");\n        restoreToken(userToken);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    bootstrapAsync();\n    //initFetch();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Particles className=\"particles\" params={particlesOptions} />\n      <Navigation\n        userToken={userToken}\n        isAuthenticated={isAuthenticated}\n        onRouteChange={onRouteChange}\n      />\n      {userToken !== null ? (\n        <InputForm />\n      ) : route === \"signin\" ? (\n        <Signin />\n      ) : (\n        <Signup />\n      )}\n    </div>\n  );\n};\n\nexport default Routes;\n","import React from \"react\";\nimport { Provider as AuthProvider } from \"../context/AuthContext\";\nimport { Provider as ClassificationProvider } from \"../context/ClassificationContext\";\nimport Routes from \"./routes\";\n\nconst Providers = () => {\n  return (\n    <ClassificationProvider>\n      <AuthProvider>\n        <Routes />\n      </AuthProvider>\n    </ClassificationProvider>\n  );\n};\n\nexport default Providers;\n","import React from \"react\";\nimport Providers from \"./navigation/index\";\n\nconst App = () => {\n  return (\n    <>\n      <Providers />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}